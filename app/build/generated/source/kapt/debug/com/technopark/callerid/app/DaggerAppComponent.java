// Generated by Dagger (https://google.github.io/dagger).
package com.technopark.callerid.app;

import com.technopark.callerid.model.Model;
import com.technopark.callerid.presenter.CallLogPresenter;
import com.technopark.callerid.presenter.CallLogPresenter_MembersInjector;
import com.technopark.callerid.presenter.CheckNumberPresenter;
import com.technopark.callerid.presenter.CheckNumberPresenter_MembersInjector;
import com.technopark.callerid.presenter.DetailPresenter;
import com.technopark.callerid.presenter.DetailPresenter_MembersInjector;
import com.technopark.callerid.presenter.SettingsPresenter;
import com.technopark.callerid.presenter.SpamProtectionPresenter;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class DaggerAppComponent implements AppComponent {
  private Provider<Model> provideModelProvider;

  private DaggerAppComponent(AppModule appModuleParam) {

    initialize(appModuleParam);
  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final AppModule appModuleParam) {
    this.provideModelProvider =
        DoubleCheck.provider(AppModule_ProvideModelFactory.create(appModuleParam));
  }

  @Override
  public void inject(CallLogPresenter callLogPresenter) {
    injectCallLogPresenter(callLogPresenter);
  }

  @Override
  public void inject(SettingsPresenter settingsPresenter) {}

  @Override
  public void inject(CheckNumberPresenter checkNumberPresenter) {
    injectCheckNumberPresenter(checkNumberPresenter);
  }

  @Override
  public void inject(SpamProtectionPresenter spamProtectionPresenter) {}

  @Override
  public void inject(DetailPresenter detailPresenter) {
    injectDetailPresenter(detailPresenter);
  }

  private CallLogPresenter injectCallLogPresenter(CallLogPresenter instance) {
    CallLogPresenter_MembersInjector.injectModel(instance, provideModelProvider.get());
    return instance;
  }

  private CheckNumberPresenter injectCheckNumberPresenter(CheckNumberPresenter instance) {
    CheckNumberPresenter_MembersInjector.injectModel(instance, provideModelProvider.get());
    return instance;
  }

  private DetailPresenter injectDetailPresenter(DetailPresenter instance) {
    DetailPresenter_MembersInjector.injectModel(instance, provideModelProvider.get());
    return instance;
  }

  public static final class Builder {
    private AppModule appModule;

    private Builder() {}

    public Builder appModule(AppModule appModule) {
      this.appModule = Preconditions.checkNotNull(appModule);
      return this;
    }

    public AppComponent build() {
      Preconditions.checkBuilderRequirement(appModule, AppModule.class);
      return new DaggerAppComponent(appModule);
    }
  }
}
